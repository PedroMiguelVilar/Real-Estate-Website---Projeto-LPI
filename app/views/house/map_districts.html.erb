<!DOCTYPE html>
<html>
  <head>
    <title>Portugal Map</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- Load Leaflet from CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://d3js.org/d3.v6.min.js"></script>
  </head>
  <body>
    <style>
      #map {
        width: 75%;
        height: 600px;
        margin: 0 auto;
      }
      .district {
          fill: #3388ff;
          stroke: #fff;
          stroke-width: 2;
          opacity: 0.7;
        }
        .city {
          fill: #ff8800;
          stroke: #fff;
          stroke-width: 2;
          opacity: 0.7;
        }
    </style>
    <%= javascript_include_tag 'leaflet' %>
    <!-- Add a dropdown menu or a list of buttons for layer selection -->
    <select id="layerSelect">
      <option value="normal" selected>Normal</option>
      <option value="distritos">Distritos</option>
      <option value="concelhos">Concelhos</option>
      <option value="freguesias">Freguesias</option>
    </select>


    <select id="layerType">
      <option value="RentBuym2" selected>Rent/Buy Ratio</option>
      <option value="Buym2">Buy/m2</option>
      <option value="Rentm2">Rent/m2</option>
    </select>


    <div id="map"></div>

<table>
  <tr>
    <th>Distrito</th>
    <th>Average Price Alugar</th>
    <th>Average Price Comprar</th>
    <th>Average Price</th>
    <th>Value</th>
    <th>Area Alugar</th>
    <th>Area Comprar</th>
  </tr>
  <tbody id="distritosTableBody"></tbody>
</table>



    <script>
      var mymap = L.map('map').setView([38.736946, -9.142685], 6);
      var myResults = <%= results.to_json.html_safe %>;

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
       attribution: '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
       maxZoom: 18
      }).addTo(mymap);

      var distritosData, concelhosData, freguesiasData;

      distritosData = L.geoJSON(null, {});
      
      concelhosData = L.geoJSON(null, {});
      
      freguesiasData = L.geoJSON(null, {});

      // Get the table body element
      var tableBody = document.getElementById("distritosTableBody");

      var sum_area_azores_a = null;
      var sum_area_azores_c = null;
      var averagePrice_a_azores = null;
      var averagePrice_c_azores = null;

      var azores_already_read = [];
      var azores_already_read_prices = [];


      // Define combined function for style and event listeners
       async function styleAndEventListeners(feature, layer, typeLayer, selectedType) {

        layer.setStyle(null);
        
        switch (typeLayer) {
          case "distrito":
           var typefeature = feature.properties.NAME_1;
           break;
          case "concelho":
           var typefeature = feature.properties.NAME_2;
           break;
          case "freguesia":
           var typefeature = feature.properties.NAME_3;
           break;
          default:
           typefeature = null;
           break;
        }
        
        var averagePrice_a = null;
        var averagePrice_c = null;
        var sum_area = null;
        

        // Loop through the results from the controller to find the average price for the current freguesia
        for (const result of myResults) {
          if (result[typeLayer] && result[typeLayer].replace(/Ilha de |Ilha do |Ilha da /g, "").replace(/Distrito de |Distrito do |Distrito da /g, "").replace(/\s+/g, "").toUpperCase() === typefeature.replace(/\s+/g, "").toUpperCase() && result[typeLayer] !== "Azores") {
            averagePrice_a = result["houses_in_group_" + typeLayer + "_alugar"];
            averagePrice_c = result["houses_in_group_" + typeLayer + "_comprar"];
            sum_area_a = result.sum_area_distrito_a; 
            sum_area_c = result.sum_area_distrito_c; 
            break;
          }

          if(result[typeLayer] === "Azores"){
            if(!azores_already_read.includes(result.sum_area_distrito_a) && !azores_already_read.includes(result.sum_area_distrito_c) && !azores_already_read_prices.includes(result["houses_in_group_" + typeLayer + "_alugar"]) && !azores_already_read_prices.includes(result["houses_in_group_" + typeLayer + "_comprar"])){
              if(result["houses_in_group_" + typeLayer + "_alugar"] !== null && result["houses_in_group_" + typeLayer + "_comprar"] !== null){
                sum_area_azores_a += parseFloat(result.sum_area_distrito_a)
                sum_area_azores_c += parseFloat(result.sum_area_distrito_c)
                averagePrice_a_azores += parseFloat(result["houses_in_group_" + typeLayer + "_alugar"]);
                averagePrice_c_azores += parseFloat(result["houses_in_group_" + typeLayer + "_comprar"]);
                azores_already_read.push(result.sum_area_distrito);
                azores_already_read_prices.push(result["houses_in_group_" + typeLayer + "_alugar"]);
                azores_already_read_prices.push(result["houses_in_group_" + typeLayer + "_comprar"]);
              }
            }
          }

        }

        if(typefeature === "Azores"){
          averagePrice_c = (averagePrice_c_azores/3).toFixed(2);
          averagePrice_a = (averagePrice_a_azores/3).toFixed(2);
          sum_area_a = sum_area_azores_a;
          sum_area_c = sum_area_azores_c;
        }

        result_map = FillMap(averagePrice_a, sum_area_a, averagePrice_c, sum_area_c, selectedType);
        
        if(typeLayer == "distrito"){ 
          var row = document.createElement("tr");
          var distritoCell = document.createElement("td");
          var averagePriceAlugarCell = document.createElement("td");
          var averagePriceComprarCell = document.createElement("td");
          var averagePriceCell = document.createElement("td");
          var valueCell = document.createElement("td");
          var areaCell_a = document.createElement("td");
          var areaCell_c = document.createElement("td");
          distritoCell.textContent = typefeature;
          averagePriceAlugarCell.textContent = averagePrice_a;
          averagePriceComprarCell.textContent = averagePrice_c;
          averagePriceCell.textContent = result_map.averagePrice_per_Area;
          valueCell.textContent = result_map.value;
          areaCell_a.textContent = sum_area_a;
          areaCell_c.textContent = sum_area_c;
          row.appendChild(distritoCell);
          row.appendChild(averagePriceAlugarCell);
          row.appendChild(averagePriceComprarCell);
          row.appendChild(averagePriceCell);
          row.appendChild(valueCell);
          row.appendChild(areaCell_a);
          row.appendChild(areaCell_c);
          tableBody.appendChild(row);
        }

        layer.setStyle({
          color: "white",
          fillColor: result_map.averagePrice_per_Area !== null ? colorScale(result_map.value) : "transparent", // Set to transparent if there are no results
          fillOpacity: 1.7754 ,
        });

        layer.on({
          mouseover: function (e) {
            // Access the global variables here
            layer.bindPopup(
              typeLayer +
              ": " +
              typefeature +
              "<br>Average Price Alugar: " +
              averagePrice_a +
              "<br>Average Price Comprar: " +
              averagePrice_c, {
                offset: [0, -10] // adjust the offset here to position the popup
              }).openPopup();
          },
          mouseout: function (e) {
            layer.closePopup();
          },
        });


        if (typeLayer == "distrito") {
          layer.addTo(mymap);
        }
      }


      function FillMap(averagePrice_a, sum_area_a, averagePrice_c, sum_area_c, selectedType){

        // Apply new styles based on selectedType
        switch (selectedType) {
          case "RentBuym2":
            result_map = RentBuym2(averagePrice_a, sum_area_a, averagePrice_c, sum_area_c);
            return result_map;
            break;
          case "Buym2":
            result_map = Buym2(averagePrice_c, sum_area_c);
            return result_map;
            break;
          case "Rentm2":
            result_map = Rentm2(averagePrice_a, sum_area_a);
            return result_map;
            break;
          default:
            console.error(selectedType)
            break;
        }
      }

      function RentBuym2(averagePrice_a, sum_area_a, averagePrice_c, sum_area_c){
        var price_per_area_a = parseFloat(averagePrice_a/sum_area_a); 
        var price_per_area_c = parseFloat(averagePrice_c/sum_area_c);

        var getMax = Math.max(price_per_area_a, price_per_area_c);
        var getMin = Math.min(price_per_area_a, price_per_area_c);

        var averagePrice_per_Area = (parseFloat(getMax/getMin)).toFixed(2);
        var value = parseFloat(averagePrice_per_Area/10).toFixed(5); // Use linear scaling

        var result = {
          value: value,
          averagePrice_per_Area: averagePrice_per_Area
        };

        return result;
      }

      function Buym2(averagePrice_c, sum_area_c){

        var averagePrice_per_Area = parseFloat(averagePrice_c/sum_area_c).toFixed(2);
        var value = parseFloat(averagePrice_per_Area/10).toFixed(5); // Use linear scaling

        var result = {
          value: value,
          averagePrice_per_Area: averagePrice_per_Area
        };

        return result;
      }

      function Rentm2(averagePrice_a, sum_area_a){

        var averagePrice_per_Area = parseFloat(averagePrice_a/sum_area_a).toFixed(2);
        var value = parseFloat(averagePrice_per_Area).toFixed(5); // Use linear scaling

        var result = {
          value: value,
          averagePrice_per_Area: averagePrice_per_Area
        };

        return result;
      }

      // Define a function to load GeoJSON data, add it to a layer, and return a promise
      function loadGeoJSONAndProcess(layer, path, type) {
        return new Promise(function (resolve, reject) {
          $.getJSON(path, function (data) {
          layer.clearLayers();
          layer.addData(data); // Add data to existing layer
          layer.eachLayer(function (l) {
            styleAndEventListeners(l.feature, l, type, selectedType);  
            layer.setStyle(null);
          });
          resolve();
              }).fail(function (error) {
          reject(error);
              });
        });
      }

      function loadGeoJSONData(data, filePath, type, selectedType) {
        return loadGeoJSONAndProcess(data, filePath, type)
          .then(function() {
            console.log("Finished processing " + type + "s");
          })
          .catch(function(error) {
            console.error("Error processing " + type + "s:", error);
          });
      }

      
      var selectedType = "RentBuym2"

      loadGeoJSONData(distritosData, "geojson/ContinenteDistritos.geojson", "distrito", selectedType);
      loadGeoJSONData(concelhosData, "geojson/ContinenteConcelhos.geojson", "concelho", selectedType);
      loadGeoJSONData(freguesiasData, "geojson/ContinenteFreguesias.geojson", "freguesia", selectedType);

      var selectedLayer = "normal"; // Variable to store the selected layer

      document.getElementById('layerSelect').addEventListener('change', function() {
        selectedLayer = this.value; // Get the selected layer from the dropdown menu
        updateDisplayedLayer(); // Call a function to update the displayed layer
      });


      mymap.on('zoomend', function() {
        var zoomLevel = mymap.getZoom();
        if (selectedLayer === 'normal') {
          if (zoomLevel <= 8) {
            mymap.removeLayer(concelhosData);
            mymap.removeLayer(freguesiasData);
            mymap.addLayer(distritosData);
          } else if (zoomLevel > 8 && zoomLevel <= 10) {
            mymap.removeLayer(distritosData);
            mymap.removeLayer(freguesiasData);
            mymap.addLayer(concelhosData);
          } else if (zoomLevel > 10) {
            mymap.removeLayer(distritosData);
            mymap.removeLayer(concelhosData);
            mymap.addLayer(freguesiasData);
          }
        }
      });

    function updateDisplayedLayer() {
      // Remove all layers from the map
      mymap.removeLayer(distritosData);
      mymap.removeLayer(freguesiasData);
      mymap.removeLayer(concelhosData);

      // Add the selected layer to the map based on the value of the selectedLayer variable
      switch (selectedLayer) {
        case 'distritos':
          mymap.addLayer(distritosData);
          break;
        case 'freguesias':
          mymap.addLayer(freguesiasData);
          break;
        case 'concelhos':
          mymap.addLayer(concelhosData);
          break;
        default:
          // Handle default case if needed
          break;
      }
    }


    document.getElementById('layerType').addEventListener('change', function() {
      selectedType = this.value; // Get the selected layer from the dropdown menu
      updateLayerData(selectedType); // Call a function to update the layers
    });

    function updateLayerData(selectedType) {
      loadGeoJSONData(distritosData, "geojson/ContinenteDistritos.geojson", "distrito", selectedType);
      loadGeoJSONData(concelhosData, "geojson/ContinenteConcelhos.geojson", "concelho", selectedType);
      loadGeoJSONData(freguesiasData, "geojson/ContinenteFreguesias.geojson", "freguesia", selectedType);
    }



    // Define a color scale function
    function colorScale(value) {
     // Define an array of colors
     var colors = ["#f7fbff", "#deebf7", "#c6dbef", "#9ecae1", "#6baed6", "#4292c6", "#2171b5", "#08519c", "#08306b"];
     // Define a linear scale to map values to colors
     var scale = d3.scaleLinear()
       .domain([0, 1]) // Input domain
       .range([0, colors.length - 1]); // Output range
     // Use the scale to get the index of the color in the array
     var colorIndex = Math.round(scale(value));
     // Return the color at the specified index
     return colors[colorIndex];
    }


    </script>
  </body>
</html>
